{
  "fullscreen": true,
  "type": "layout",
  "layoutStyle": {
    "maxHeight": "100vh",
    "width": "100vw",
    "flexFlow": "column",
    "background": "white",
    "height": "100vh",
    "display": "flex"
  },
  "_id": "admin.ui.detail",
  "persistent": true,
  "screens": [
    {
      "screens": [
        {
          "type": "typography",
          "text": "UI",
          "layoutStyle": {
            "padding": "8px",
            "width": "100%",
            "background": "lightgray"
          }
        },
        {
          "type": "layout",
          "screens": [
            {
              "key": "_params_.path",
              "density": "compact",
              "label": "JSON Path",
              "changed": "this.event.send({name: 'path', path: this.value});",
              "layoutStyle": {
                "flexGrow": 1
              },
              "type": "input"
            },
            {
              "label": "LANGUAGE",
              "layoutStyle": {
                "width": "120px"
              },
              "changed": "this.event.send({name: 'lang', lang: this.value});",
              "density": "compact",
              "type": "input",
              "key": "_params_.lang"
            }
          ],
          "layoutStyle": {
            "width": "100%",
            "flex": "row",
            "display": "flex"
          }
        },
        {
          "init": "this.event.subscribe(\r\n    'code-editor',\r\n    'path',\r\n    async (event) => {\r\n\r\n        let path = event.path;\r\n        if (!path) path = '';\r\n\r\n        // update the value with path\r\n        // see if the value path exists\r\n        if (obj.get(this.data, path)) {\r\n            let value = obj.get(this.data, path)\r\n\r\n            if (value && value.constructor != \"\".constructor) {\r\n                this.data._params_.type = \"object\";\r\n                this.value = JSON.stringify(value, null, 2);\r\n            } else {\r\n                this.data._params_.type = \"string\";\r\n                this.value = value;\r\n            }\r\n\r\n        }\r\n        \r\n    }\r\n);\r\n\r\nthis.event.subscribe(\r\n    'code-editor',\r\n    'lang',\r\n    (event) => {\r\n        this.uiElement.language = event.lang\r\n    }\r\n);",
          "destroy": "this.event.unsubscribe_all('code-editor');",
          "key": "",
          "style": {
            "height": "100%",
            "width": "100%",
            "minHeight": "400px"
          },
          "transform": "value = JSON.stringify(value, null, 4)",
          "language": "json",
          "changed": "let type = obj.get(this.data, '_params_.type');\r\nlet path = obj.get(this.data, '_params_.path', '');\r\nif (!type || type == 'object') {\r\n    // if path is specified    \r\n    if (!path) {\r\n        // convert from string to object\r\n        Object.assign(this.data, JSON.parse(value))\r\n    } else {\r\n        obj.set(this.data, path, JSON.parse(value))\r\n    }\r\n\r\n} else {\r\n    // if path is specified    \r\n    if (!path) {\r\n        // convert from string to object\r\n        Object.assign(this.data, value)\r\n    } else {\r\n        //\r\n        obj.set(this.data, path, value)\r\n    }\r\n}\r\n\r\n",
          "type": "code-editor"
        }
      ],
      "type": "layout",
      "layoutStyle": {
        "overflow": "auto",
        "flexGrow": 1
      }
    },
    {
      "screens": [
        {
          "click": "this.event.send({name: 'close-dialog'});",
          "variant": "text",
          "type": "button",
          "label": "CLOSE"
        },
        {
          "type": "layout",
          "layoutStyle": {
            "width": "1px",
            "flexGrow": 1
          }
        },
        {
          "variant": "text",
          "click": "this.event.send({ name: 'close-dialog' });\r\nthis.$confirm.require({\r\n    message: 'Are you sure you want to delete?',\r\n    header: 'Confirmation',\r\n    icon: 'pi pi-exclamation-triangle',\r\n    accept: async () => {\r\n        //callback to execute when user confirms the action\r\n        // delete\r\n        await this.rest.request(`/api/admin/ui`, this.data, 'delete');\r\n        this.event.send({ name: \"refresh\", key: \"uis\" })\r\n    },\r\n    reject: () => {\r\n        //callback to execute when user rejects the action\r\n    },\r\n    onHide: () => {\r\n        //Callback to execute when dialog is hidden\r\n    }\r\n});\r\n",
          "label": "DELETE",
          "type": "button",
          "color": "warn"
        },
        {
          "click": "//\r\n(async () => { \r\n    let data = {...this.data};\r\n    // delete _params_\r\n    delete data._params_;\r\n\r\n    let response = await this.rest.request('/api/admin/ui', data, 'post');\r\n    if(response.status != 200) {\r\n        console.error(response.data);\r\n    } else {\r\n        this.event.send({name: \"snackbar\", text: \"SAVED!\"})\r\n    }\r\n    \r\n})();",
          "color": "primary",
          "type": "button",
          "label": "SAVE"
        }
      ],
      "layoutStyle": {
        "background": "ghostwhite",
        "position": "relative",
        "display": "flex",
        "padding": "8px"
      },
      "type": "layout"
    }
  ],
  "_updated": {
    "seconds": 1667896563,
    "nanoseconds": 334000000
  }
}
