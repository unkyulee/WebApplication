CREATE TABLE IF NOT EXISTS core_workflow (
    _id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255),
    description VARCHAR(255),
    script LONGTEXT,
    _created DATETIME default CURRENT_TIMESTAMP,
    _updated DATETIME default CURRENT_TIMESTAMP
);

DELETE FROM core_workflow WHERE _id = 40;
INSERT INTO core_workflow (_id, name) VALUES (40, 'Mysql List');

DELETE FROM core_workflow WHERE _id = 70;
INSERT INTO core_workflow (_id, name) VALUES (70, 'Mysql Upsert');

DELETE FROM core_workflow WHERE _id = 80;
INSERT INTO core_workflow (_id, name) VALUES (80, 'Mysql Delete');

DELETE FROM core_workflow WHERE _id = 90;
INSERT INTO core_workflow (_id, name) VALUES (90, 'Mysql Query');

DELETE FROM core_workflow WHERE _id = 140;
INSERT INTO core_workflow (_id, name) VALUES (140, 'User Upsert');

DELETE FROM core_workflow WHERE _id = 150;
INSERT INTO core_workflow (_id, name) VALUES (150, 'User Change Password');

INSERT INTO `core_workflow` (`_id`, `name`, `description`, `script`, `_created`, `_updated`) VALUES
(40, 'Mysql List', NULL, '<?php\r\n\r\nfunction getList(\r\n    $mysql\r\n    , $sqlTemplate\r\n    , $options\r\n    , $where\r\n    , $params\r\n    , $sort\r\n    , $size = \"10\"\r\n    , $page = \"1\"\r\n) {\r\n    $result = null;\r\n\r\n    // null check\r\n    if (IsNullOrEmpty($sqlTemplate)) {\r\n        return null;\r\n    }\r\n\r\n    //\r\n    $id = $options[\'id\'];\r\n    $fields = $options[\'fields\'];\r\n\r\n    // Paginate the result\r\n    $sqlTemplate = str_replace(\'{fields}\', $fields, $sqlTemplate);\r\n    if (count($where) > 0) {\r\n        $sqlTemplate = str_replace(\r\n            \'{where}\'\r\n            , \' WHERE \' . implode(\' AND \', $where)\r\n            , $sqlTemplate\r\n        );\r\n    } else {\r\n        $sqlTemplate = str_replace(\r\n            \'{where}\'\r\n            , \'\'\r\n            , $sqlTemplate\r\n        );\r\n    }\r\n\r\n    // sorting\r\n    if (count($sort) > 0) {\r\n        $sqlTemplate = str_replace(\r\n            \'{order}\'\r\n            , \' ORDER BY \' . implode(\' ,\', $sort)\r\n            , $sqlTemplate\r\n        );\r\n    } else {\r\n        $sqlTemplate = str_replace(\r\n            \'{order}\'\r\n            , \'\'\r\n            , $sqlTemplate\r\n        );\r\n    }\r\n\r\n    // Run SQL\r\n    $offset = (intval($page) - 1) * intval($size);\r\n    $sql = \"$sqlTemplate LIMIT $offset, $size\";\r\n    $result = $mysql->query($sql, $params);\r\n\r\n    // For each row run fetch\r\n    $fetch = @$options[\"fetch\"];\r\n    if ($fetch != null) {\r\n        foreach ($result as &$row) {\r\n            Fetch($mysql, $fetch, $row);\r\n        }\r\n    }\r\n\r\n    // remove exclude fields\r\n    $excludeFields = @$options[\'excludeFields\'];    \r\n    if($excludeFields != null) {\r\n        foreach ($result as $row) {\r\n            foreach($excludeFields as $excludeField) {\r\n                if(@$row[$excludeField] != null)\r\n                    unset($row[$excludeField]);\r\n            }\r\n        }        \r\n    }\r\n\r\n    // Convert to Json\r\n    $jsonFields = @$options[\'jsonFields\'];\r\n    if ($jsonFields != null) {\r\n        foreach ($result as &$row) {\r\n            foreach ($jsonFields as $index => $jsonField) {\r\n                $row[$jsonField] = json_decode($row[$jsonField]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return $result;\r\n}\r\n\r\nfunction Fetch($mysql, $fetch, &$row)\r\n{\r\n    // run fetch on each row to add extra data\r\n    foreach ($fetch as $operation) {\r\n        // run fetch query\r\n        $sql = $operation[\"sql\"];\r\n        $params = array();\r\n        if (@$operation[\"parameters\"]) {\r\n            foreach ($operation[\"parameters\"] as $param) {\r\n                $sql = str_replace(\'@\'.$param, \'?\', $sql);\r\n                $params[] = $row[$param];\r\n            }\r\n        }\r\n\r\n        $result = $mysql->query($sql, $params);\r\n        $type = @$operation[\'type\'];\r\n        if (IsNullOrEmpty($type)) {\r\n            foreach ($operation[\'fields\'] as $field) {\r\n                $fetchResult = array();\r\n                foreach ($result as $fetchedRow) {\r\n                    $fetchResult[] = $fetchedRow[$field[\'source\']];\r\n                }\r\n                $row[$field[\'target\']] = $fetchResult;\r\n            }\r\n        } \r\n        \r\n        else if ($type == \'object\') {\r\n            $key = $operation[\'key\'];\r\n            $fetchResult = array();\r\n            foreach ($result as $fetchedRow) {\r\n                $item = array();\r\n                foreach ($operation[\'fields\'] as $field) {\r\n                    $item[$field[\'target\']] = $fetchedRow[$field[\'source\']];\r\n                }\r\n                $fetchResult[] = $item;\r\n            }\r\n\r\n            $row[$key] = $fetchResult;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getCount($mysql, $sqlTemplate, $where, $params)\r\n{\r\n    $total = 0;\r\n\r\n    // null check\r\n    $sql = str_replace(\r\n        \"{fields}\"\r\n        , \"COUNT(*) AS CNT\"\r\n        , $sqlTemplate\r\n    );\r\n\r\n    if (count($where) > 0) {\r\n        $sql = str_replace(\r\n            \'{where}\'\r\n            , \' WHERE \' . implode(\' AND \', $where)\r\n            , $sql\r\n        );\r\n    } else {\r\n        $sql = str_replace(\r\n            \'{where}\'\r\n            , \'\'\r\n            , $sql\r\n        );\r\n    }\r\n\r\n    // sorting\r\n    $sql = str_replace(\'{order}\', \'\', $sql);\r\n\r\n    // Run SQL\r\n    $result = $mysql->query($sql, $params);\r\n    if (count($result) > 0) {\r\n        $total = $result[0][\'CNT\'];\r\n    }\r\n\r\n    return $total;\r\n}\r\n\r\n// Get Configuration\r\n$config_json = json_decode($config, true);\r\nif (IsNullOrEmpty($config_json)) {\r\n    $msg = json_error(json_last_error());\r\n    return json_encode(array(\r\n        \"error\" => $msg\r\n        , \"content\" => $config\r\n    ));\r\n}\r\n$config = $config_json;\r\n\r\n// check if admin\r\n$admin = false;\r\nif (@$config[\"admin\"] != null) {\r\n    $admin = true;\r\n}\r\n\r\n// Get Navigation ID\r\n$navigation_id = getNavigationId();\r\nif (IsNullOrEmpty($navigation_id)) {\r\n    return json_encode(array(\r\n        \"error\" => \"No X-App-Key specified\"\r\n    ));\r\n}\r\n\r\n// pagination\r\n$page = get(\"page\"); if(IsNullOrEmpty($page)) $page = \"1\";\r\n$size = get(\"size\"); if(IsNullOrEmpty($size)) $size = \"10\";\r\n\r\n// Query Options - Sort\r\n$sort = array();\r\nif (null != get(\"_sort\")) {\r\n    $sort[] = get(\"_sort\");\r\n}\r\n\r\nif (null != get(\"_sort_desc\")) {\r\n    $sort[] = get(\"_sort_desc\") . \" DESC\";\r\n}\r\n\r\n// Query - Filters\r\n$where = array();\r\n\r\n// get body\r\n$data = getData();\r\n$params = array();\r\n\r\nif ($data != null && count($data) > 0) {\r\n    foreach ($data as $key => $value) {\r\n        //\r\n        $parameterName = $key;\r\n        $parameterName = str_replace(\"__\", \"._\", $parameterName);\r\n        $parameterName = str_replace(\"_lte\", \"\", $parameterName);\r\n        $parameterName = str_replace(\"_gte\", \"\", $parameterName);\r\n        $parameterName = str_replace(\"_lt\", \"\", $parameterName);\r\n        $parameterName = str_replace(\"_gt\", \"\", $parameterName);\r\n\r\n        if ($key == \"page\") {\r\n            continue;\r\n        } else if ($key == \"size\") {\r\n            continue;\r\n        } else if ($key == \"_export\") {\r\n            continue;\r\n        } else if ($key == \"_aggregation\") {\r\n            continue;\r\n        } else if ($key == \"_sort\") {\r\n            continue;\r\n        } else if ($key == \"_sort_desc\") {\r\n            continue;\r\n        }\r\n\r\n        // search keyword\r\n        else if ($key == \"_search\") {\r\n            if (IsNullOrEmpty($value) == false) {\r\n                $search = array();\r\n                foreach ($config[\'searchFields\'] as $searchKey) {\r\n                    $search[] = \"$searchKey LIKE CONCAT(\'%\', ?, \'%\')\";\r\n                    $params[] = $value;\r\n                }\r\n                $where[] = \"(\" . implode(\" OR \", $search) . \")\";\r\n            }\r\n            continue;\r\n        }\r\n\r\n        // range filter\r\n        else if (endsWith($key, \"_date_gte\")) {\r\n            $where[] = \"$parameterName >= ?\";\r\n        } else if (endsWith($key, \"_date_lte\")) {\r\n            $where[] = \"$parameterName <= ?\";\r\n        } else if (endsWith($key, \"_date_gt\")) {\r\n            $where[] = \"$parameterName > ?\";\r\n        } else if (endsWith($key, \"_date_lt\")) {\r\n            $where[] = \"$parameterName < ?\";\r\n        }\r\n\r\n        // otherwise string filter\r\n        else {\r\n            $where[] = \"$parameterName = ?\";\r\n        }\r\n\r\n        // add to params\r\n        $params[] = $value;\r\n    }\r\n}\r\n\r\n// Add navigation_id filter\r\nif ($admin == false) {\r\n    $where[] = \"navigation_id = ?\";\r\n    $params[] = $navigation_id;\r\n}\r\n\r\n$result = getList($ds, $config[\'sql\'], $config, $where, $params, $sort, $size, $page);\r\n$total = getCount($ds, $config[\'sql\'], $where, $params);\r\n\r\nreturn json_encode(array(\r\n    \"page\" => $page\r\n    , \"size\" => $size\r\n    , \"total\" => $total\r\n    , \"data\" => $result,\r\n));', '2018-12-07 18:02:55', '2018-12-07 18:02:55'),
(70, 'Mysql Upsert', NULL, '<?php\r\n\r\nfunction resolveExternal($externals) {\r\n        \r\n    $extTable = $external[\"table\"];\r\n    $extIdField = $external[\"id\"];    \r\n    $relationships = $external[\"relationships\"];\r\n    $mapping = $external[\"mapping\"];\r\n\r\n    if($mapping == null) {\r\n        echo \'mapping is null\';\r\n        return;\r\n    }\r\n    \r\n    // for each value create new record on external\r\n    $source = $data[$mapping[\"source\"]];\r\n    $sourceKey = $mapping[\"sourceKey\"];\r\n\r\n    // fetch existing records\r\n    $where = array();\r\n    if ($relationships != null)\r\n        foreach ($relationships as $relationship)\r\n            $where[] = $relationship[\'target\'].\" = \".$data[$relationship[\'source\']];\r\n\r\n    //try\r\n    //{\r\n        $existingRecordIds = $ds->query(\r\n            \"SELECT $extIdField FROM $extTable WHERE \".implode(\' AND \', $where)\r\n        );\r\n        // delete from existingRecords\r\n        $sourceRecordIds = array();\r\n        foreach($source as $key => $value) if( $key == $sourceKey ) $sourceRecordIds[] = $value;\r\n        \r\n        $tobeDeletedIds = array_diff($existingRecordIds, $sourceRecordIds);\r\n        foreach ($tobeDeleteIds as $item)\r\n            $ds->delete($extTable, $item, $extIdField);\r\n    //} catch(Exception $e) { }\r\n\r\n    foreach ($source as $item)\r\n    {\r\n        // new record\r\n        $record = array();\r\n\r\n        // fill up the record with foreign key relationship\r\n        if ($relationships != null) {\r\n            foreach ($relationships as $relationship) {                        \r\n                $record[$relationship[\'target\']] = $data[$relationship[\'source\']];\r\n            }\r\n        }       \r\n\r\n        // fill up the mapping value\r\n        $type = $mapping[\"type\"];\r\n        if ($type == \"object\")\r\n        {\r\n            $targets = $mapping[\"targets\"];\r\n            if ($targets != null) {\r\n                foreach ($targets as $target) {\r\n                    $record[$target[\"target\"]] = $item[$target[\"source\"]];\r\n                }                            \r\n            }\r\n                \r\n        }\r\n\r\n        // navigation_id\r\n        if ($navigation_id != null) $record[\"navigation_id\"] = $navigation_id;\r\n\r\n        // find the key                            \r\n        if ($sourceKey != null && $item[$sourceKey] != null)\r\n        {\r\n            // update \r\n            $record[$extIdField] = $item[$sourceKey];            \r\n        }\r\n        $ds->upsert($extTable, $record, $extIdField);\r\n    }\r\n\r\n}\r\n\r\n// Get Configuration\r\n$config_json = json_decode($config, true);\r\nif(IsNullOrEmpty($config_json)) {    \r\n    $msg = json_error(json_last_error());\r\n    return json_encode(array(\r\n        \"error\" => $msg\r\n        , \"content\" => $config\r\n    ));\r\n}\r\n$config = $config_json;\r\n\r\n// Table \r\n$table = @$config[\"table\"]; \r\nif (IsNullOrEmpty($table)) {\r\n    return json_encode(array(\r\n        \"error\" => \"No table Specified.\" \r\n    ));\r\n} \r\n\r\n// ID Field\r\n$idField = @$config[\"id\"]; \r\nif (IsNullOrEmpty($idField)) {\r\n    return json_encode(array(\r\n        \"error\" => \"No id field Specified.\"\r\n    ));\r\n} \r\n            \r\n// Get Navigation ID\r\n$navigation_id = getNavigationId(); \r\nif (IsNullOrEmpty($navigation_id)) {\r\n    return json_encode(array(\r\n        \"error\" => \"No X-App-Id Specified.\"\r\n    ));\r\n}\r\n\r\n// check if admin \r\n$admin = false; \r\nif (@$config[\"admin\"] != null) {\r\n    $admin = true;\r\n    $navigation_id = null;\r\n}\r\n\r\n// Form document\r\n$data = getData();        \r\n\r\n// set default fields\r\n$data = $ds->setDefaults($data, $navigation_id);\r\n\r\n// Complete external relationships\r\n$externals = @$config[\"externals\"];\r\nif($externals) {\r\n    foreach ($externals as $external) {\r\n        resolveExternal($external);\r\n    }    \r\n}\r\n\r\n// Exclude data\r\n$excludeFields = @$config[\'excludeFields\'];\r\nif($excludeFields != null)\r\n    foreach($excludeFields as $excludeField)\r\n        if(@$data[$excludeField] != null)\r\n            unset($data[$excludeField]);\r\n\r\n// Update\r\n$id = $ds->upsert($table, $data, $idField);\r\n\r\n// Return Result\r\nif($id)\r\n    return \'{ \"_id\": \"\'.$id.\'\" }\';\r\n\r\n?>', '2018-12-07 18:02:55', '2018-12-07 18:02:55'),
(80, 'Mysql Delete', NULL, '<?php\r\n\r\n// Get Configuration\r\n$config_json = json_decode($config, true);\r\nif(IsNullOrEmpty($config_json)) {    \r\n    $msg = json_error(json_last_error());\r\n    return json_encode(array(\r\n        \"error\" => $msg\r\n        , \"content\" => $config\r\n    ));\r\n}\r\n$config = $config_json;\r\n\r\n// Table \r\n$table = @$config[\"table\"]; if (IsNullOrEmpty($table)) return \'{ error: \"No table Specified.\" }\';\r\n\r\n// ID Field\r\n$idField = @$config[\"id\"]; if (IsNullOrEmpty($idField)) return \'{ error: \"No id field Specified.\" }\';\r\n            \r\n// Get Navigation ID\r\n$navigation_id = getNavigationId(); if (IsNullOrEmpty($navigation_id)) return \'{ error: \"No X-App-Id Specified.\" }\';\r\n\r\n// check if admin \r\n$admin = false; \r\nif (@$config[\"admin\"] != null) {\r\n    $admin = true;\r\n    $navigation_id = null;\r\n}\r\n\r\n// Retrieve DataService            \r\nif (!$ds) return \'{ error: \"Data Service not provided\" }\';\r\n\r\n// Form document\r\n$data = getData();\r\n\r\n// filter\r\n$where = array();\r\n$params = array();\r\nif($navigation_id) {\r\n    $where[] = \'navigation_id = ?\';\r\n    $params[] = $navigation_id;\r\n}\r\n$where[] = \"$idField = ?\";\r\n$params[] = $data[$idField];\r\n\r\n$result = $ds->delete($table, $where, $params);\r\n\r\n// Return Result\r\nreturn json_encode(array(\r\n    \"result\" => $result\r\n));\r\n\r\n?>\r\n', '2018-12-07 18:02:55', '2018-12-07 18:02:55'),
(90, 'Mysql Query', NULL, '<?php\r\n\r\n// Query\r\n$query = get(\'query\');\r\n$data = $ds->exec($query);\r\n\r\nreturn json_encode($data);\r\n\r\n?>', '2018-12-07 18:02:55', '2018-12-07 18:02:55'),
(140, 'User Upsert', NULL, '<?php\r\n\r\nfunction updateGroup($ds, $navigation_id, $groupd_ids, $user_id)\r\n{\r\n    // delete the user from all the group        \r\n    $ds->query(\r\n        \"DELETE FROM core_group_user WHERE user_id=?\"\r\n        , array(\"user_id\" => $user_id)\r\n    );\r\n\r\n    // then add to the specified group\r\n    foreach($groupd_ids as $group_id) {        \r\n        $ds->query(\r\n            \"INSERT INTO core_group_user (group_id, user_id) VALUES (?, ?)\"\r\n            , array(\"group_id\" => $group_id, \"user_id\" => $user_id)\r\n        );            \r\n    }            \r\n        \r\n}\r\n\r\n// Get Configuration\r\n$config_json = json_decode($config, true);\r\nif(IsNullOrEmpty($config_json)) {    \r\n    $msg = json_error(json_last_error());\r\n    return json_encode(array(\r\n        \"error\" => $msg\r\n        , \"content\" => $config\r\n    ));\r\n}\r\n$config = $config_json;\r\n\r\n\r\n// Table \r\n$table = @$config[\"table\"]; \r\nif (IsNullOrEmpty($table)) {\r\n    return json_encode(array(\r\n        \"error\" => \"No table Specified.\" \r\n    ));\r\n} \r\n\r\n// ID Field\r\n$idField = @$config[\"id\"]; \r\nif (IsNullOrEmpty($idField)) {\r\n    return json_encode(array(\r\n        \"error\" => \"No id field Specified.\"\r\n    ));\r\n} \r\n            \r\n// Get Navigation ID\r\n$navigation_id = getNavigationId(); \r\nif (IsNullOrEmpty($navigation_id)) {\r\n    return json_encode(array(\r\n        \"error\" => \"No X-App-Id Specified.\"\r\n    ));\r\n}\r\n\r\n// Form document\r\n$data = getData();\r\n\r\n// Get Group ID\r\n$group_ids = @$data[\"group_id\"];\r\nif ($group_ids == null || count($group_ids) == 0)\r\n    return json_encode(array(\"error\" => \"No Group Specified.\"));\r\n\r\n// data validation - id is mandatory \r\n$id = get(\"id\");\r\nif (IsNullOrEmpty($id))\r\n    return json_encode(array(\"error\" => \"id is mandatory field\")); \r\n\r\n// if _id exists - Is it existing user?\r\nif (@$data[\"_id\"] != null)\r\n{\r\n    // Find Item    \r\n    $sql = \"SELECT * FROM core_user WHERE _id=?\";    \r\n    $results = $ds->query($sql, array(\"_id\" => $data[\"_id\"]));\r\n    if ($results != null && count($result) > 0)\r\n    {\r\n        // account exists\r\n        $user = $results[0];\r\n\r\n        // check if the password matches\r\n        if (@$data[\"password\"] != null && @$user[\"password\"] != $data[\"password\"])\r\n            if (password_verify(@$data[\"password\"], $user[\'password\']) == false)            \r\n                return json_encode(array(\"error\" => \"password doesn\'t match\"));\r\n\r\n        // update the password\r\n        if (@$data[\"password\"] != null) \r\n            $data[\"password\"] = password_hash($data[\"password\"], PASSWORD_DEFAULT);\r\n\r\n        $updatedData = $ds->setDefaults($data, $navigation_id);\r\n\r\n        // Exclude data\r\n        $excludeFields = @$config[\"excludeFields\"];\r\n        if ($excludeFields != null)\r\n            foreach ($excludeFields as $excludeField) \r\n                if($excludeField != \"password\" && @$updatedData[$excludeField] != null)\r\n                    unset($updatedData[$excludeField]);        \r\n\r\n        // update user\r\n        $ds->upsert($table, $updatedData, $idField);\r\n\r\n        // update group\r\n        updateGroup($ds, $navigation_id, $group_ids, $data[\"_id\"]);\r\n        \r\n        return json_encode(array(\"_id\" => $data[\"_id\"]));\r\n    }\r\n}\r\n\r\n// new user creation\r\nelse\r\n{\r\n    // check if the user with same id already exists    \r\n    $sql = \"SELECT * FROM core_user WHERE id=? AND navigation_id=?\";\r\n    \r\n    $results = $ds->query($sql, array(\r\n        \"id\" => $id\r\n        , \"navigation_id\" => $navigation_id\r\n    ));\r\n    if ($results != null && count($results) > 0) \r\n        return json_encode(array(\"error\" => \"same id already exists\"));\r\n\r\n    // create new user\r\n    $data[\"password\"] = password_hash($data[\"password\"], PASSWORD_DEFAULT);\r\n\r\n    $updatedData = $ds->setDefaults($data, $navigation_id);\r\n\r\n    // Exclude data\r\n    $excludeFields = @$config[\"excludeFields\"];\r\n    if ($excludeFields != null)\r\n        foreach ($excludeFields as $excludeField) \r\n            if($excludeField != \"password\" && @$updatedData[$excludeField] != null)\r\n                unset($updatedData[$excludeField]);\r\n\r\n    // update user\r\n    $insertedId = $ds->insert($table, $updatedData, $idField);\r\n\r\n    // update group\r\n    updateGroup($ds, $navigation_id, $group_ids, $insertedId);\r\n\r\n    return json_encode(array(\"_id\" => $insertedId));\r\n}\r\n\r\n?>', '2018-12-07 18:02:55', '2018-12-07 18:02:55'),
(150, 'User Change Password', NULL, '<?php\r\n\r\n// Get Configuration\r\n$config = json_decode($config, true);\r\n     \r\n// Get Navigation ID\r\n$navigation_id = getNavigationId(); if (IsNullOrEmpty($navigation_id)) return \'{ error: \"No X-App-Id Specified.\" }\';\r\n\r\n// check if admin \r\n$admin = false; \r\nif (@$config[\"admin\"] != null) {\r\n    $admin = true;\r\n    $navigation_id = null;\r\n}\r\n\r\n// Form document\r\n$data = getData();\r\n\r\n// error check\r\nif (@$data[\"new_password\"] == null) return \'{ error: \"new password missing\" }\';\r\nif (@$data[\"new_password_confirm\"] == null && !$admin) return \'{ error: \"repeated password missing\" }\';\r\nif (@$data[\"new_password_confirm\"] != @$data[\"new_password\"] && !$admin) return \'{ error: \"new password and repeated password mismatch\" }\';\r\n\r\n// find the user\r\n$params = array(\"_id\" => $data[\"_id\"]);\r\n$sql = \"SELECT * FROM core_user WHERE _id=?\";\r\n$results = $ds->query($sql, $params);\r\n\r\nif ($results != null && count($results) > 0)\r\n{\r\n    // account exists\r\n    $user = $results[0];\r\n\r\n    if ($admin == false) {\r\n        // empty password condition\r\n        if( IsNullOrEmpty($user[\'password\']) && IsNullOrEmpty(@$data[\"old_password\"]) ) {\r\n            // this is ok\r\n        }\r\n        // check if the password matches\r\n        else if (password_verify(@$data[\"old_password\"], $user[\'password\']) == false)\r\n            return \'{ error: \"password does not match\" }\';\r\n    }        \r\n\r\n    // update password                \r\n    $password = password_hash( $data[\"new_password\"], PASSWORD_DEFAULT);\r\n    \r\n    // update user\r\n    $updatedId = $ds->upsert(        \r\n        \"core_user\"\r\n        , array(\"password\" => $password, \"_id\" => $data[\"_id\"])\r\n        , \"_id\"\r\n    );\r\n\r\n    // return result    \r\n    return json_encode(array(\"id\" => $data[\"_id\"]));\r\n}\r\n\r\nreturn \'{ error: \"no matching user found\" }\';\r\n?>', '2018-12-07 18:02:55', '2018-12-07 18:02:55');
